definitions:
  dto.ExampleRequestUpdate:
    properties:
      email:
        example: test@example.com
        type: string
      username:
        example: jhondoe
        type: string
    type: object
  dto.ExampleResponseDelete:
    properties:
      message:
        example: your account has been successfully deleted
        type: string
    type: object
  dto.RequestLogin:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password
        type: string
    type: object
  dto.RequestUpdate:
    properties:
      message:
        example: A Photo
        type: string
    type: object
  dto.ResponseGet:
    properties:
      caption:
        example: Beautiful Photo
        type: string
      created_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      id:
        example: 1
        type: integer
      photo_url:
        example: https://example.com/photo.jpg
        type: string
      title:
        example: A Photo
        type: string
      updated_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      user:
        properties:
          email:
            example: test@example.com
            type: string
          username:
            example: jhondoe
            type: string
        type: object
    type: object
  dto.ResponseInsert:
    properties:
      created_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      id:
        example: 1
        type: integer
      message:
        example: A Photo
        type: string
      photo_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  dto.ResponseList:
    properties:
      created_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: jhondoe
        type: string
      social_media_url:
        example: https://example.com/url
        type: string
      updated_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      user:
        properties:
          id:
            example: 1
            type: integer
          profile_image_url:
            example: https://example.com/photo.jpg
            type: string
          username:
            example: jhondoe
            type: string
        type: object
      user_id:
        example: 1
        type: integer
    type: object
  dto.ResponseListWrapper:
    properties:
      social_medias:
        items:
          $ref: '#/definitions/dto.ResponseList'
        type: array
    type: object
  dto.ResponseLogin:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJxd2Vxd2...
        type: string
    type: object
  final_project_hacktiv8_modules_comments_dto.Request:
    properties:
      message:
        example: A Photo
        type: string
      photo_id:
        example: 1
        type: integer
    type: object
  final_project_hacktiv8_modules_comments_dto.Response:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        properties:
          caption:
            type: string
          id:
            type: integer
          photo_url:
            type: string
          title:
            type: string
          user_id:
            type: integer
        type: object
      photo_id:
        type: integer
      user:
        properties:
          email:
            type: string
          id:
            type: integer
          username:
            type: string
        type: object
      user_id:
        type: integer
    type: object
  final_project_hacktiv8_modules_comments_dto.ResponseUpdate:
    properties:
      id:
        example: 1
        type: integer
      message:
        example: A Photo
        type: string
      photo_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  final_project_hacktiv8_modules_photos_dto.Request:
    properties:
      caption:
        example: Beautiful Photo
        type: string
      photo_url:
        example: https://example.com/photo.jpg
        type: string
      title:
        example: A Photo
        type: string
    type: object
  final_project_hacktiv8_modules_photos_dto.Response:
    properties:
      caption:
        example: Beautiful Photo
        type: string
      created_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      id:
        example: 1
        type: integer
      photo_url:
        example: https://example.com/photo.jpg
        type: string
      title:
        example: A Photo
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  final_project_hacktiv8_modules_photos_dto.ResponseUpdate:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  final_project_hacktiv8_modules_socialMedias_dto.Request:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    type: object
  final_project_hacktiv8_modules_socialMedias_dto.Response:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  final_project_hacktiv8_modules_users_dto.Request:
    properties:
      age:
        example: 23
        type: integer
      email:
        example: test@example.com
        type: string
      password:
        example: password
        type: string
      username:
        example: jhondoe
        type: string
    type: object
  final_project_hacktiv8_modules_users_dto.Response:
    properties:
      age:
        example: 23
        type: integer
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      updated_at:
        example: "2021-11-03T01:52:41.035Z"
        type: string
      username:
        example: jhondoe
        type: string
    type: object
  helpers.BaseResponse:
    properties:
      data: {}
      errors: {}
      status:
        type: integer
    type: object
  helpers.ExampleErrorResponse:
    properties:
      email:
        example: cannot be blank
        type: string
      message:
        example: user bad request
        type: string
      password:
        example: cannot be blank
        type: string
    type: object
info:
  contact: {}
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get comments
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/final_project_hacktiv8_modules_comments_dto.Response'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Get comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a comment
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_comments_dto.Request'
      produces:
      - application/json
      responses:
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ResponseInsert'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Create a comment
      tags:
      - comments
  /comments/:commentID:
    delete:
      consumes:
      - application/json
      description: Delete a comment
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the comment
        in: path
        name: commentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.BaseResponse'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Delete a comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update a comment
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the comment
        in: path
        name: commentID
        required: true
        type: integer
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.RequestUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_comments_dto.ResponseUpdate'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Update a comment
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: GetPhotos a photo
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ResponseGet'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: GetPhotos a photo
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create new photo
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_photos_dto.Request'
      produces:
      - application/json
      responses:
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_photos_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Create new photo
      tags:
      - photos
  /photos/:photoID:
    delete:
      consumes:
      - application/json
      description: Delete a photo
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: photoID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            $ref: '#/definitions/helpers.BaseResponse'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Delete a photo
      tags:
      - photos
  /photos/{id}:
    put:
      consumes:
      - application/json
      description: Update a photo by ID
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: photo ID
        in: path
        name: id
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_photos_dto.Request'
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_photos_dto.ResponseUpdate'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Update a photo by ID
      tags:
      - photos
  /socialmedias:
    get:
      consumes:
      - application/json
      description: Get all social media
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ResponseListWrapper'
              type: object
      summary: Get all social media
      tags:
      - socialmedias
    post:
      consumes:
      - application/json
      description: Create social media
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_socialMedias_dto.Request'
      produces:
      - application/json
      responses:
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_socialMedias_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Create new social media
      tags:
      - socialmedias
  /socialmedias/:socialmediaid:
    delete:
      consumes:
      - application/json
      description: Delete by id social media
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the social media
        in: path
        name: socialmediaid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_socialMedias_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Record not found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Delete by id social media
      tags:
      - socialmedias
    put:
      consumes:
      - application/json
      description: Update by id social media
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the social media
        in: path
        name: socialmediaid
        required: true
        type: integer
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_socialMedias_dto.Request'
      produces:
      - application/json
      responses:
        "200":
          description: SUCCESS
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_socialMedias_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Record not found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Update by id social media
      tags:
      - socialmedias
  /users:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ExampleResponseDelete'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.ExampleRequestUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_users_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.RequestLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ResponseLogin'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "404":
          description: Record not found
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/final_project_hacktiv8_modules_users_dto.Request'
      produces:
      - application/json
      responses:
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/final_project_hacktiv8_modules_users_dto.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
        "409":
          description: data conflict, like email already exist
          schema:
            allOf:
            - $ref: '#/definitions/helpers.BaseResponse'
            - properties:
                errors:
                  $ref: '#/definitions/helpers.ExampleErrorResponse'
              type: object
      summary: Create new user
      tags:
      - users
swagger: "2.0"
